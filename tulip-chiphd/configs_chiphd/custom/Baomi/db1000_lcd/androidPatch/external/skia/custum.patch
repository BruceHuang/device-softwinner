diff --git a/src/images/SkImageDecoder_libjpeg.cpp b/src/images/SkImageDecoder_libjpeg.cpp
old mode 100755
new mode 100644
index ff9f809..729c539
--- a/src/images/SkImageDecoder_libjpeg.cpp
+++ b/src/images/SkImageDecoder_libjpeg.cpp
@@ -23,6 +23,7 @@
 
 #ifdef HW_JPEG
 #include "vdecoder.h"
+#include "pdecoder.h"
 #include "CdxParser.h"
 #include "IonMemPool.h"
 #include "memoryAdapter.h"
@@ -35,9 +36,10 @@ extern "C" {
     #include "jerror.h"
 }
 
+#ifdef HW_JPEG
 struct skJpegDecBitStream
 {
-//    struct DecBitStream bitStream;
+    struct DecBitStream bitStream;
 
     // fStream is ref'ed and unref'ed
     SkStream*       fStream;
@@ -47,7 +49,7 @@ struct skJpegDecBitStream
 
     int offset;
 };
-
+#endif
 
 // These enable timing code that report milliseconds for an encoding/decoding
 //#define TIME_ENCODE
@@ -257,6 +259,14 @@ private:
 };
 #endif
 
+static int64_t GetNowUs() 
+{
+    struct timeval tv;
+    gettimeofday(&tv, NULL);
+
+    return (int64_t)tv.tv_sec * 1000000ll + tv.tv_usec;
+}
+
 class SkJPEGImageDecoder : public SkImageDecoder {
 public:
 #ifdef SK_BUILD_FOR_ANDROID
@@ -264,6 +274,7 @@ public:
         fImageIndex = NULL;
         fImageWidth = 0;
         fImageHeight = 0;
+        nTotalTime = 0;
 
 #ifdef HW_JPEG       
         pVideo = NULL;
@@ -274,7 +285,7 @@ public:
 		pid_t pid = getpid();
     	GetCallingApkName(pid, strApkName, 1024);
 
-    	if(!strcmp(strApkName, "com.android.cts.graphics") || !strcmp(strApkName, "com.sina.weibo.image"))
+    	if(!strcmp(strApkName, "com.android.cts.graphics"))
     	{
     		hwDocede = 0;
     	}
@@ -284,9 +295,12 @@ public:
 
     virtual ~SkJPEGImageDecoder() {
         SkDELETE(fImageIndex);
-        
+     
 #ifdef HW_JPEG
+		logv("++++ decode totaltime: %lld", nTotalTime);
+
         if(pVideo) DestroyVideoDecoder(pVideo);
+        if(pDecBitStream) free(pDecBitStream);
 #endif
     }
 #endif
@@ -309,6 +323,7 @@ private:
     int fImageHeight;
 #endif
 
+	int64_t nTotalTime;
 #ifdef HW_JPEG
 	VideoDecoder *pVideo;
 	int           hwDocede;
@@ -611,14 +626,15 @@ static bool get_src_config(const jpeg_decompress_struct& cinfo,
     return true;
 }
 
-#if 0
+#ifdef HW_JPEG
 // ************************************************************************************
 // **** adapter for hardware decode read skStream
 static int skBitStreamRead(struct DecBitStream* stream, void* buf, int len) {
     struct skJpegDecBitStream* skDecStream = (struct skJpegDecBitStream*)stream;
+    /*
     if (skDecStream->fDecoder != NULL && skDecStream->fDecoder->shouldCancelDecode()) {
         return -1;
-    }
+    }*/
     
     int bytes = skDecStream->fStream->read(buf, len);
     // note that JPEG is happy with less than the full read,
@@ -631,30 +647,96 @@ static int skBitStreamRead(struct DecBitStream* stream, void* buf, int len) {
     return bytes;
 }
 
-static int skBitStreamSeek(struct DecBitStream* stream, int len) {
+static int skBitStreamSize(struct DecBitStream* stream) {
     struct skJpegDecBitStream* skDecStream = (struct skJpegDecBitStream*)stream;
+    /*
     if (skDecStream->fDecoder != NULL && skDecStream->fDecoder->shouldCancelDecode()) {
         return -1;
-    }
+    }*/
     
-    int bytes = skDecStream->fStream->skip(len);
-    if(bytes < 0 || bytes > len)
-    {
+    if(skDecStream->fStream->hasLength())
+	{
+		return skDecStream->fStream->getLength();
+	}
+
+	return -1;
+}
+
+// seek to an absolute position
+static int skBitStreamSeek(struct DecBitStream* stream, int offset) {
+    struct skJpegDecBitStream* skDecStream = (struct skJpegDecBitStream*)stream;
+    /*
+    if (skDecStream->fDecoder != NULL && skDecStream->fDecoder->shouldCancelDecode()) {
+        return -1;
+    }*/
+
+	int size  = skBitStreamSize(stream);
+	if(size > 0 && offset > size)
+	{
     	return -1;
     }
 
-    skDecStream->offset += bytes;
-    return bytes;
+    //logd("+++ seek start offset : %d", offset);
+    if(offset < skDecStream->offset)
+    {
+	    if(skDecStream->fStream->rewind() < 0)
+	    {
+	    	return -1;
+	    }
+	    
+	    int bytes = skDecStream->fStream->skip(offset);
+	    if(bytes < offset)
+	    {
+	    	loge("skBitStreamSeek failed");
+	    	return -1;
+	    }
+    }
+    else if(offset > skDecStream->offset)
+    {
+    	int skipByte = offset - skDecStream->offset;
+    	int bytes = skDecStream->fStream->skip(skipByte);
+	    if(bytes < skipByte)
+	    {
+	    	loge("skBitStreamSeek failed, skipByte: %d, bytes: %d", skipByte, bytes);
+	    	return -1;
+	    }
+    }
+
+    //logd("++++ seek success offset : %d", offset);
+    
+    skDecStream->offset = offset;
+    return 0;
 }
 
 static int skBitStreamTell(struct DecBitStream* stream) {
     struct skJpegDecBitStream* skDecStream = (struct skJpegDecBitStream*)stream;
+    /*
     if (skDecStream->fDecoder != NULL && skDecStream->fDecoder->shouldCancelDecode()) {
         return -1;
-    }
+    }*/
     
     return skDecStream->offset;
 }
+
+struct skJpegDecBitStream* skBitStreamCreate(SkStream* stream, SkImageDecoder* decoder)
+{
+	struct skJpegDecBitStream* jpegStream = (struct skJpegDecBitStream*)malloc(sizeof(struct skJpegDecBitStream));
+	if(jpegStream == NULL)
+	{
+		return NULL;
+	}
+	memset(jpegStream, 0x00, sizeof(struct skJpegDecBitStream));
+	
+	jpegStream->fStream = stream;
+	jpegStream->fDecoder = decoder;
+	jpegStream->bitStream.read = skBitStreamRead;
+	jpegStream->bitStream.tell = skBitStreamTell;
+	jpegStream->bitStream.seek = skBitStreamSeek;
+	jpegStream->bitStream.size = skBitStreamSize;
+
+	return jpegStream;
+}
+
 #endif
 
 // **************************************************************************************
@@ -665,6 +747,8 @@ SkImageDecoder::Result SkJPEGImageDecoder::onDecode(SkStream* stream, SkBitmap*
     SkAutoTime atm("JPEG Decode");
 #endif
 
+	//int64_t start, end;
+	//start = GetNowUs();
 	//logd("***************** onDecode start, streamLength: %d, bm->getSize: %d********************", stream->getLength(), bm->getSize());
     JPEGAutoClean autoClean;
     VideoPicture *videoPicture = NULL;
@@ -725,7 +809,7 @@ SkImageDecoder::Result SkJPEGImageDecoder::onDecode(SkStream* stream, SkBitmap*
     }
 
 	// if stream length > 8M, sbm will overflow, so goto soft dec
-    if((stream->getLength() > 30*1024*1024) || (cinfo.image_width*cinfo.image_height<500*500))
+    if((stream->getLength() > 12*1024*1024) || (cinfo.image_width*cinfo.image_height<500*500))
     {
     	hwDocede = 0;
     	goto CMYK_decode;
@@ -792,12 +876,13 @@ SkImageDecoder::Result SkJPEGImageDecoder::onDecode(SkStream* stream, SkBitmap*
 		}
 
 		vConfig.nRotateDegree = 0;
-		vConfig.nVbvBufferSize = stream->hasLength() ? stream->getLength(): 10*1024*1024;
+		vConfig.nVbvBufferSize = stream->hasLength() ? ((stream->getLength()+1023) & ~1023) : 10*1024*1024;
+		logd("====== vConfig.nVbvBufferSize: %d", vConfig.nVbvBufferSize);
 		vConfig.eOutputPixelFormat = PIXEL_FORMAT_RGBA; // we do not care colorType, the pixels of bm is malloc here
 
 		VideoStreamInfo videoInfo;
 		memset(&videoInfo, 0x00, sizeof(VideoStreamInfo));
-		videoInfo.eCodecFormat = VIDEO_CODEC_FORMAT_MJPEG;
+		videoInfo.eCodecFormat = VIDEO_CODEC_FORMAT_MJPEG; 
 
 		if ((InitializeVideoDecoder(pVideo, &videoInfo, &vConfig)) != 0) 
 		{
@@ -1005,6 +1090,9 @@ SkImageDecoder::Result SkJPEGImageDecoder::onDecode(SkStream* stream, SkBitmap*
 		}
 		// *************** hardware decode end ********************
 
+		//end = GetNowUs();
+		//logd("onDecode hw time diff: %lld", end-start);
+
 		return kSuccess;
 	}
 	
@@ -1202,11 +1290,15 @@ bool SkJPEGImageDecoder::onBuildTileIndex(SkStreamRewindable* stream, int *width
 	// *********** get the pic width and height   ****************
 	// **** skStream must seekable, or CMYK cannot be decoded ****
 	// ****************************************************
+	//int64_t start, end;
+	//start = GetNowUs();
+        
 	jpeg_decompress_struct* cinfo = imageIndex->cinfo();
 
     skjpeg_error_mgr sk_err;
     set_error_mgr(cinfo, &sk_err);
 
+	pDecBitStream = skBitStreamCreate(stream, this);
     // if stream length > 6M, sbm will overflow, so goto soft dec
     if(stream->getLength() > 22*1024*1024)
     {
@@ -1272,12 +1364,12 @@ bool SkJPEGImageDecoder::onBuildTileIndex(SkStreamRewindable* stream, int *width
 		vConfig.bRotationEn = 0;
 		vConfig.nRotateDegree = 0;
 		vConfig.eOutputPixelFormat = PIXEL_FORMAT_RGBA;
-		vConfig.nVbvBufferSize = stream->hasLength() ? stream->getLength(): 10*1024*1024;
+		vConfig.nVbvBufferSize = 512;   //stream->hasLength() ? stream->getLength(): 10*1024*1024;
 		vConfig.bVirMallocSbm = 1;  // malloc sbm, or memory leak
 
 		VideoStreamInfo videoInfo;
 		memset(&videoInfo, 0x00, sizeof(VideoStreamInfo));
-		videoInfo.eCodecFormat = VIDEO_CODEC_FORMAT_MJPEG;
+		videoInfo.eCodecFormat = VIDEO_CODEC_FORMAT_JPEG;
 
 		if ((InitializeVideoDecoder(pVideo, &videoInfo, &vConfig)) != 0) 
 		{
@@ -1288,6 +1380,7 @@ bool SkJPEGImageDecoder::onBuildTileIndex(SkStreamRewindable* stream, int *width
 
 	if(hwDocede)
 	{
+		/*
 		int length;
 		if(stream->hasLength())
 		{
@@ -1345,6 +1438,7 @@ bool SkJPEGImageDecoder::onBuildTileIndex(SkStreamRewindable* stream, int *width
 			logd("#####Error: Submit Video Stream Data failed!\n"); 	
 			return false;				
 		}
+		*/
 
 		// step : decode stream now
 		int endofstream = 0;
@@ -1363,6 +1457,7 @@ bool SkJPEGImageDecoder::onBuildTileIndex(SkStreamRewindable* stream, int *width
     	pJpegSkiaConfig.region_bot = 0;
     	pJpegSkiaConfig.region_left = 0;
     	pJpegSkiaConfig.region_right = 0;
+    	pJpegSkiaConfig.bitStream = &pDecBitStream->bitStream;
 
     	DecoderSetSpecialData(pVideo, &pJpegSkiaConfig);
 
@@ -1385,6 +1480,9 @@ bool SkJPEGImageDecoder::onBuildTileIndex(SkStreamRewindable* stream, int *width
 			case VDECODE_RESULT_OK:
 			default:
 				logd("video decode Error: %d!\n", ret);
+				hwDocede = 0;
+				stream->rewind();
+				goto soft_decode;
 				break;
 		}
 		
@@ -1402,7 +1500,9 @@ bool SkJPEGImageDecoder::onBuildTileIndex(SkStreamRewindable* stream, int *width
 		SkDELETE(fImageIndex);
 		fImageIndex = imageIndex.detach();
 
-		//logd("buildIndex: %lld", end -start);
+		//end = GetNowUs();
+		//nTotalTime += (end-start);
+		//logd("hw time buildIndex: %lld", end -start);
 	    return true;
 	}
 	
@@ -1476,7 +1576,9 @@ bool SkJPEGImageDecoder::onDecodeSubset(SkBitmap* bm, const SkIRect& region) {
     if (!hwDocede && (NULL == fImageIndex)) {
         return false;
     }
-    
+
+    //int64_t start, end;
+    //start = GetNowUs();
 	//logd("***************** decodeSubset, region(%d, %d, %d, %d), bm->getSize:%d**************", region.fLeft, region.fRight, region.fBottom, region.fTop, bm->getSize());
 
     VideoPicture *videoPicture = NULL;
@@ -1588,7 +1690,7 @@ bool SkJPEGImageDecoder::onDecodeSubset(SkBitmap* bm, const SkIRect& region) {
 	    	if(vbvBuffer)        IMPoolPfree(vbvBuffer);
 			return return_failure(*cinfo, *bm, "IMPoolPalloc");
 		}
-//		logd("vbvBuffer: 0x%p, inputIndexBuffer: 0x%p, pictureData: 0x%p", vbvBuffer, inputIndexBuffer, pictureData);
+		//logd("vbvBuffer: 0x%p, inputIndexBuffer: 0x%p, pictureData: 0x%p", vbvBuffer, inputIndexBuffer, pictureData);
 
 	    //default value.
 		pJpegSkiaConfig.mode_selection      = 2;
@@ -1647,10 +1749,10 @@ bool SkJPEGImageDecoder::onDecodeSubset(SkBitmap* bm, const SkIRect& region) {
 				memcpy(tmp, pictureData, bitmap.getSize());
 			}
 		    
-	        bm->swap(bitmap);
+	        bm->swap(bitmap); 
 
 	        if(0) // save stream
-			{
+			{ 
 				char location[1024];
 				sprintf(location, "/mnt/sdcard/entry_tileDecode_%d_%d_%d_%d.es", region.fLeft, region.fRight, region.fTop, region.fBottom);
 			    FILE *rgbfp = fopen(location,"wb");
@@ -1671,6 +1773,10 @@ bool SkJPEGImageDecoder::onDecodeSubset(SkBitmap* bm, const SkIRect& region) {
 	        if(pictureData)      IMPoolPfree(pictureData);
 		    if(inputIndexBuffer) IMPoolPfree(inputIndexBuffer);
 		    if(vbvBuffer)        IMPoolPfree(vbvBuffer);
+
+		    //end = GetNowUs();
+			//nTotalTime += (end-start);
+			//logd("+++hw subDecode time:%lld, nTotalTime: %lld", end -start, nTotalTime);
 	        return true;
 		}
 		
@@ -1711,7 +1817,10 @@ bool SkJPEGImageDecoder::onDecodeSubset(SkBitmap* bm, const SkIRect& region) {
 	    IMPoolPfree(inputIndexBuffer);
 	    IMPoolPfree(vbvBuffer);
 
-		//logd("+++ subDecode time:%lld", end -start);
+		//end = GetNowUs();
+		//nTotalTime += (end-start);
+		//logd("+++hw subDecode time:%lld, nTotalTime: %lld", end -start, nTotalTime);
+		
 
 		return true;
 	}
@@ -1869,6 +1978,9 @@ SkImageDecoder::Result SkJPEGImageDecoder::onDecode(SkStream* stream, SkBitmap*
     SkAutoTime atm("JPEG Decode");
 #endif
 
+	//int64_t start, end;
+	//start = GetNowUs();
+	
     JPEGAutoClean autoClean;
 
     jpeg_decompress_struct  cinfo;
@@ -2000,6 +2112,8 @@ SkImageDecoder::Result SkJPEGImageDecoder::onDecode(SkStream* stream, SkBitmap*
             rowptr += bpr;
         }
         jpeg_finish_decompress(&cinfo);
+        //end = GetNowUs();
+        //logd("onDecode softdec time: %lld", end-start);
         return kSuccess;
     }
 #endif
@@ -2061,6 +2175,9 @@ SkImageDecoder::Result SkJPEGImageDecoder::onDecode(SkStream* stream, SkBitmap*
         return return_failure(cinfo, *bm, "skip rows");
     }
     jpeg_finish_decompress(&cinfo);
+    
+	//end = GetNowUs();
+	//logd("onDecode softdec time: %lld", end-start);
 
     return kSuccess;
 }
@@ -2068,6 +2185,8 @@ SkImageDecoder::Result SkJPEGImageDecoder::onDecode(SkStream* stream, SkBitmap*
 #ifdef SK_BUILD_FOR_ANDROID
 bool SkJPEGImageDecoder::onBuildTileIndex(SkStreamRewindable* stream, int *width, int *height) {
 
+	//int64_t start, end;
+	//start = GetNowUs();
     SkAutoTDelete<SkJPEGImageIndex> imageIndex(SkNEW_ARGS(SkJPEGImageIndex, (stream, this)));
     jpeg_decompress_struct* cinfo = imageIndex->cinfo();
 
@@ -2124,6 +2243,11 @@ bool SkJPEGImageDecoder::onBuildTileIndex(SkStreamRewindable* stream, int *width
     SkDELETE(fImageIndex);
     fImageIndex = imageIndex.detach();
 
+	//end = GetNowUs();
+	//nTotalTime += (end-start);
+	//logd("soft buildIndex time: %lld", end-start);
+
+	
     return true;
 }
 
@@ -2131,6 +2255,11 @@ bool SkJPEGImageDecoder::onDecodeSubset(SkBitmap* bm, const SkIRect& region) {
     if (NULL == fImageIndex) {
         return false;
     }
+ 
+	//logd("***************** decodeSubset, region(%d, %d, %d, %d), bm->getSize:%d**************", region.fLeft, region.fRight, region.fBottom, region.fTop, bm->getSize());
+    //int64_t start, end;
+    //start = GetNowUs();
+    
     jpeg_decompress_struct* cinfo = fImageIndex->cinfo();
 
     SkIRect rect = SkIRect::MakeWH(fImageWidth, fImageHeight);
@@ -2233,6 +2362,11 @@ bool SkJPEGImageDecoder::onDecodeSubset(SkBitmap* bm, const SkIRect& region) {
             cropBitmap(bm, &bitmap, actualSampleSize, region.x(), region.y(),
                        region.width(), region.height(), startX, startY);
         }
+
+        //end = GetNowUs();
+        //nTotalTime += (end-start);
+        //logd("soft onDecodeSub  time: %lld, nTotalTime: %lld", end-start, nTotalTime);
+        
         return true;
     }
 #endif
@@ -2292,6 +2426,11 @@ bool SkJPEGImageDecoder::onDecodeSubset(SkBitmap* bm, const SkIRect& region) {
         cropBitmap(bm, &bitmap, actualSampleSize, region.x(), region.y(),
                    region.width(), region.height(), startX, startY);
     }
+
+    //end = GetNowUs();
+    //nTotalTime += (end-start);
+    //logd("soft onDecodeSub  time: %lld, nTotalTime: %lld", end-start, nTotalTime);
+    
     return true;
 }
 #endif
